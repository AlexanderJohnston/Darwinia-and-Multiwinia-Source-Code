Top Level Network Design

SERVER:
    - Ticks at 25 FPS.
    - Constantly listens for user input details from client
    - Queues all input for the current frame
    - Sends queue contents to all clients using UDP at end of frame
    - Each chunk will be given a sequence id
    - Also sends a copy of chunks for previous two frames


Server::Advance()
{
    while(1)
    {
        for all clients()
        {
            if QueueContainsAMessageFromClient()
            {
                ResetWatchDogTimer()
            }

            if WatchDogTimerFor(client) > 1.0
            {
                AssumeClientDead()
            }
        }

        letter = ConvertQueueIntoLetter();

        for all clients
        {
            send letterto(client)
        }

        sleepuntil(lastFrameTimeStamp + 1/25)
        lastFrameTimeStamp = timeNow()
    }
}


CLIENT:
    - Runs heavy weight physics at 25 fps
    - Runs as a seperate thread (at least conceptually) to light-weight physics and rendering
    - Blocks when it doesn't have any new 


Client::Advance()
{
    while(1)
    {
        If I am a Server
            if (time >= nextServerTimeSlice)
                Server advance loop

        If I am a Client
        {
            HandleUserInput();

            if (UserHasDoneSomething)
                SendUserInput();
            else if (timeSinceLastSend > 1/10 second)
                SendI'mAliveMessage();

            if (smallSlice == -1)
            {
                // DO NETWORK GET
                if (queue not empty)
                    if (ThereIsAGapInMyIncomingData())
                        SendToServer(ResyncMeMessage)
                        break
                    else
                        smallSlice = 0;
                        UpdateKeyObjects();
                }
            }
    
            if (smallSlice != -1) 
            {
                HeavyWeightAdvance(smallSlice);

                if (smallSlice < maxSlices)
                    smallSlice++;
                else
                    smallSlice = -1;
            }

            if (QueueLength == 0 && WeHaveTimeToRender())
                Render();

            if (TooFarBehind())
            {
            }

        }

    }
}

