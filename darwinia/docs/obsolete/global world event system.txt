
=============================
= GLOBAL WORLD EVENT SYSTEM =
=============================


- List of locations
- List of buildings
- List of objects

All buildings / objects have a unique ID 
                        and a position

 

====================
GLOBAL LOCATION DATA
====================

    - map file describing fixed landscape
    - current primary mission
    - boolean : mission or placeholder
    - list of secondary objectives (generated from scrolls/ports)


=============
GOLDEN SCROLL
=============

    - Pickup-able object
    - At mission start, check to see if they are present
    - At mission end, global state is updated


=====
PORTS
=====

    - The same as golden scrolls
    - When you capture a port, trigger cutscene, update global state
    - Need a function which analyses port state, determines if a location
        can be visited (graph traversal)

==============
ARK COMPONENTS
==============

    - Same as golden scrolls


================
GLOBAL BUILDINGS
================

    - Upgrade port          (open/closed)
    - Construction yard     (offline/online/ark)
    - Power station         (offline/online)
    - Refining mine         (empty/populated)
    - Containment           (up/down)
    - Labs                  (research status)
    - Biosphere             (incubation building offline/online)


=========================
MISSION/CUTSCENE TRIGGERS
=========================

Data file, one entry per mission and cutscene, stating conditions for that 
mission or cutscene to occur.

Conditions we need to be able to analyse
    - Port/Building offline/online state
    - Research status/availability

When starting a new level, global state must be analysed
    - Buildings online/offline set
    - Scroll availability set
    - Secondary objectives generated automatically (eg get scroll)


====================
GLOBAL STATE MONITOR
====================

    - Called at end of every mission 
    - Called at every global state change
    - Performs analysis on global state, 
            sometimes plays cutscenes
            sometimes makes new missions available
    - When missions are completed, a "placeholder" level is put in their place
    
    - Generic conditions parser eg
        !B:3  R:6                    
         (building ID 3 (fireall) is offline and Research item 6 is owned)
        Ordered list of changes eg
            Make some new missions available
            Trigger cutscenes
            etc

    - Also store if condition set has already been triggered



===========================
OBJECTIVES LIST IN MISSIONS
===========================

    - Each mission file has the Primary objective specified in a header
    - A list of secondary objectives is autodetected at level start:
        All ports not already online
        All scrolls not already captured

    - Detecting if Primary is complete is now done by evaluating the
        condition from the level file



==================================
AUTOGENERATED PLACEHOLDER MISSIONS
==================================

    - Occurs every time a player leaves a level
    - Scans the world in a grid (say 10x10)
        Evaluates population of each entity type
        Generates new instant-unit list to approximate this
    - Empty level file instant unit list, replace with generated one
    - Save level file into players save directory under name
        autogenerated_locationid

    - When a primary objective is complete, auto-set mission filename
        to autogenerated filename 
        (this MUST occur before global conditions are evaluated,
         to allow it to be overridden)



============
TEST HARNESS
============

    - Recursively explores every possible Global game state
    - Dumps the whole lot into a big text file

    - At each iteration
        Dump state to test result file
        List available missions with primary objectives
        For each available mission
            Copy global state and place into stack
            Do mission
                Complete primary
                Complete secondaries
                Dump changes made to test result file
                Re-evaluate global events
                Dump events triggered to test result file eg Cutscene
            Recurse
            Remove global state from stack and delete

    - Human readable summary at top :
        List of all possible ways to complete the game
        List of all warnings / errors

    - Auto-testing of all scripts at load time


==============================
INABILITY TO HARM GLOBAL STATE
==============================

    - Engineers can only set global state that is 
        specified in mission objectives
    - Eg can only enable a yard, not disable it

    - Engineers cannot disable trunk ports

        

