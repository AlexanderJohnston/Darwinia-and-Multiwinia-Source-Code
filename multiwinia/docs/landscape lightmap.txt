void Landscape::ApplyLightmap( int _worldX, int _worldZ, RGBAColour *_colour )
{
    int cellSizeX = m_heightMap->m_cellSizeX * LIGHTMAP_SCALEFACTOR;
    int cellSizeZ = m_heightMap->m_cellSizeX * LIGHTMAP_SCALEFACTOR;

    int cellX = int( (float) _worldX / (float) cellSizeX );
    int cellZ = int( (float) _worldZ / (float) cellSizeZ );

    unsigned char lightmapVal = m_lightMap->GetData(cellX, cellZ);

    *_colour *= (float) lightmapVal / 255.0f;
    _colour->a = 0;
}


void Landscape::DeleteLightMap()
{
    if( m_lightMap )
    {
        delete m_lightMap;
        m_lightMap = NULL;
        
        glDeleteTextures( 1, &m_lightMapTextureId );
        m_lightMapTextureId = -1;
    }
}


// *** GenerateLightMap
void Landscape::GenerateLightMap()
{
    double starttime = GetHighResTime();

    delete m_lightMap;
    
    int numCellsX = m_heightMap->GetNumColumns()/LIGHTMAP_SCALEFACTOR;
    int numCellsZ = m_heightMap->GetNumRows()/LIGHTMAP_SCALEFACTOR;
    m_lightMap = new Array2D<unsigned char>(numCellsX, numCellsZ, 0);
    m_lightMap->SetAll(255);


    //
    // Ray cast from each light onto the landscape
    
    Vector3 lightPos( 700.0f, 200.0f, 100.0f );

    for( int z = 0; z < numCellsZ; z++ )
    {
        for( int x = 0; x < numCellsX; x++ )
        {
            float worldX = m_heightMap->GetRealX(x * LIGHTMAP_SCALEFACTOR);
            float worldZ = m_heightMap->GetRealY(z * LIGHTMAP_SCALEFACTOR);
            worldX += m_heightMap->m_cellSizeX/2;
            worldZ += m_heightMap->m_cellSizeX/2;
            float worldY = m_heightMap->GetValue( worldX, worldZ );
            if( worldY >= 0.0f )
            {
                Vector3 cellPos( worldX, worldY, worldZ );
                Vector3 rayDir = ( cellPos - lightPos ).Normalise();
                Vector3 cellNormal = m_normalMap->GetValue( worldX, worldZ );

                if( cellNormal * rayDir >= 0.0f )
                {
                    // Facing the wrong way
                    m_lightMap->PutData(x, z, 50);
                }
                else
                {
                    Vector3 result;
                    bool rayHit = RayHit( lightPos, rayDir, &result );
                    float range = (result - cellPos).Mag();
            
                    if( range > 5 )
                    {
                        m_lightMap->PutData(x, z, 50);
                    }
                }
            }
        }
    }


//    //
//    // Apply our smoothing filter
//
//    int filter[5][5] = { 0, 1, 3, 1, 0,
//                         1, 3, 6, 3, 1, 
//                         3, 6, 10, 6, 3,
//                         1, 3, 6, 3, 1,
//                         0, 1, 3, 1, 0 };
//    int filterScale = 55;
//
//    unsigned char *smoothedMask = new unsigned char[ numCellsX * numCellsZ ];
//    for( int x = 0; x < numCellsX; ++x )
//    {
//        for( int z = 0; z < numCellsZ; ++z )
//        {
//            int value = 0;
//            for( int fx = -2; fx <= 2; ++fx )
//            {
//                for( int fz = -2; fz <= 2; ++fz )
//                {
//                    if( x + fx >= 0 && z + fz >= 0 &&
//                        x + fx < numCellsX &&
//                        z + fz < numCellsZ )
//                    {
//                        value += m_lightMap[ (z+fz) * numCellsX + (x+fx) ] 
//                               * filter[fx+2][fz+2];
//                    }                    
//                }
//            }
//            value /= filterScale;
//            if( value < 0 ) value = 0;
//            if( value > 255 ) value = 255;
//            smoothedMask[ z * numCellsX + x ] = value;
//        }
//    }
//    

    //
    // Make a texture out of that lightmap

    BitmapRGBA finalImage( numCellsX, numCellsZ );
    for( int z = 0; z < numCellsZ; z++ )
    {
        for( int x = 0; x < numCellsX; x++ )
        {
            unsigned char value = m_lightMap->GetData(x, z);
            finalImage.PutPixel( x, z, RGBAColour( value, value, value ) );
        }
    }
    m_lightMapTextureId = finalImage.ConvertToTexture();

//    delete m_lightMap;
//    m_lightMap = smoothedMask;

    double totalTime = GetHighResTime() - starttime;
    DebugOut( "Generated landscape lightmap in %dms\n", int(totalTime * 1000) );
}
